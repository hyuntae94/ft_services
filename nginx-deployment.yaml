apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment //nginx-deployment라는 이름을 가진 디플로이먼트 생성
  labels:
    app: nginx
spec:
  replicas: 3 // 3개의 파드를 생성
  selector: // 디플로이먼트가 관리할 파드를 찾는 방법 정의. 여기서는 템플릿에 정의된 레이블(app:nginx)을 선택한다.
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx // app: nginx라는 레이블 생성 
    spec:
      containers:
      - name: nginx //컨테이너 1개를 생성하고, .spec.template.spec.containers[0].name 필드를 사용해서 nginx 이름을 붙인다.
        image: nginx:1.14.2 //파드가 도커 허브의 nginx 1.14.2 버전 이미지를 실행하는 nginx 컨테이너 1개를 실행하는 것을 나타낸다.
        ports:
        - containerPort: 80
* 디플로이먼트 업데이트
- nginx:1.14.2 이미지 대신 nginx:1.16.1 이미지를 사용하도록 nginx 파드를 업데이트
=> kubectl set image deployment/nginx-deployment nginx=nginx:1.16.1 --record
-------------------------------------------------------------------------------
* apiVersion, kind, metadata 필수
* spec.template, spec.selector spec의 필수 필드
* .spec.template.spec.restartPolicy 에는 오직 Always 만 허용되고, 명시되지 않으면 기본값이 된다.
* .spec.replicas 은 필요한 파드의 수를 지정하는 선택적 필드이다. 이것의 기본값은 1이다.
* .spec.selector 는 .spec.template.metadata.labels 과 일치해야 하며, 그렇지 않으면 API에 의해 거부된다.
* API 버전 apps/v1 에서는 .spec.selector 와 .metadata.labels 이 설정되지 않으면 .spec.template.metadata.labels 은 기본 설정되지 않는다. 그래서 이것들은 명시적으로 설정되어야 한다.
* .spec.strategy 는 이전 파드를 새로운 파드로 대체하는 전략을 명시한다. .spec.strategy.type 은 "재생성" 또는 "롤링업데이트"가 될 수 있다. "롤링업데이트"가 기본값이다.
* 기존의 모든 파드는 .spec.strategy.type==Recreate 이면 새 파드가 생성되기 전에 죽는다.
  이렇게 하면 업그레이드를 생성하기 전에 파드 종료를 보장할 수 있다. 디플로이먼트를 업그레이드하면, 이전 버전의 모든 파드가 즉시 종료된다.
  신규 버전의 파드가 생성되기 전에 성공적으로 제거가 완료되기를 대기한다. 
-------------------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app: MyApp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9376
- my-service 라는 서비스 오브젝트를 생성하고, app=MyApp 레이블을 가진 파드의 TCP 9376포트를 대상으로 한다.
- 서비스 셀렉터의 컨트롤러는 셀렉터와 일치하는 파드를 지속적으로 검색하고, "my-service"라는 엔드포인트 오브젝트에 대한 모든 업데이트를 POST한다.
- 기본적으로 그리고 편의상, targetPort는 port 필드와 같은 값으로 설정된다.
-------------------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app: MyApp
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 9376
    - name: https
      protocol: TCP
      port: 443
      targetPort: 9377
- 서비스에 멀티 포트를 사용하는 경우, 모든 포트 이름을 명확하게 지정해야 한다
- targetPort: 컨테이너가 트래픽을 수신하는 포트
- port: 추상화된 서비스 포트로 다른 파드들이 서비스에 접속하기 위해 사용하는 포트
- ServiceTypes
1.ClusterIP: 서비스를 클러스터-내부 IP에 노출시킨다. 이 값을 선택하면 클러스터 내에서만 서비스에 도달할 수 있다. 이것은 ServiceTypes의 기본 값이다.
2.LoadBalancer: 클라우드 공급자의 로드 밸런서를 사용하여 서비스를 외부에 노출시킨다. 외부 로드 밸런서가 라우팅되는 NodePort와 ClusterIP 서비스가 자동으로 생성된다.
-------------------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: my-nginx
  labels:
    run: my-nginx
spec:
  ports:
  - port: 80
    protocol: TCP
  selector:
    run: my-nginx
- run: my-nginx레이블이 부착된 모든 파드에 TCP 포트 80을 대상으로 하는 서비스를 만들고 추상화된 서비스포트에 노출시킨다.
- 만약 hostIP와 protocol을 뚜렷히 명시하지 않으면, 쿠버네티스는 hostIP의 기본 값으로 0.0.0.0를, protocol의 기본 값으로 TCP를 사용한다.
-------------------------------------------------------------------------------
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        imagePullPolicy: Never
- imagePullPolicy: Never: 이미지가 로컬에 존재한다고 가정한다. 이미지를 풀(Pull) 하기 위해 시도하지 않는다.
-------------------------------------------------------------------------------
